{
    "zero-shot": "Write unit tests in Python for the following function.\n\nfrom typing import List\n\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n    result = []\n\n    current_string = []\n\n    current_depth = 0\n\n\n\n    for c in paren_string:\n\n        if c == '(':\n\n            current_depth += 1\n\n            current_string.append(c)\n\n        elif c == ')':\n\n            current_depth -= 1\n\n            current_string.append(c)\n\n\n\n        if current_depth == 0 and current_string:\n\n            result.append(''.join(current_string))\n\n            current_string.clear()\n\n\n\n    return result",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nfrom typing import List\n\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n    result = []\n\n    current_string = []\n\n    current_depth = 0\n\n\n\n    for c in paren_string:\n\n        if c == '(':\n\n            current_depth += 1\n\n            current_string.append(c)\n\n        elif c == ')':\n\n            current_depth -= 1\n\n            current_string.append(c)\n\n\n\n        if current_depth == 0 and current_string:\n\n            result.append(''.join(current_string))\n\n            current_string.clear()\n\n\n\n    return result",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases and logic involved. Then write complete tests using unittest.\n\nFunction:\nfrom typing import List\n\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n\n    result = []\n\n    current_string = []\n\n    current_depth = 0\n\n\n\n    for c in paren_string:\n\n        if c == '(':\n\n            current_depth += 1\n\n            current_string.append(c)\n\n        elif c == ')':\n\n            current_depth -= 1\n\n            current_string.append(c)\n\n\n\n        if current_depth == 0 and current_string:\n\n            result.append(''.join(current_string))\n\n            current_string.clear()\n\n\n\n    return result"
}