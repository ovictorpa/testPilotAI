{
    "zero-shot": "Write unit tests in Python for the following function.\n\nimport math\n\nfrom typing import Optional\n\n\n\ndef is_prime(p: int) -> bool:\n\n\n\n    if p < 2:\n\n        return False\n\n    for k in range(2, int(math.sqrt(p)) + 1):\n\n        if p % k == 0:\n\n            return False\n\n    return True\n\n\n\ndef prime_fib(n: int) -> Optional[int]:\n\n\n\n    f = [0, 1] \n\n    prime_fib_count = 0\n\n    \n\n    while True:\n\n        f.append(f[-1] + f[-2])\n\n        if is_prime(f[-1]):\n\n            prime_fib_count += 1\n\n            if prime_fib_count == n:\n\n                return f[-1]",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nimport math\n\nfrom typing import Optional\n\n\n\ndef is_prime(p: int) -> bool:\n\n\n\n    if p < 2:\n\n        return False\n\n    for k in range(2, int(math.sqrt(p)) + 1):\n\n        if p % k == 0:\n\n            return False\n\n    return True\n\n\n\ndef prime_fib(n: int) -> Optional[int]:\n\n\n\n    f = [0, 1] \n\n    prime_fib_count = 0\n\n    \n\n    while True:\n\n        f.append(f[-1] + f[-2])\n\n        if is_prime(f[-1]):\n\n            prime_fib_count += 1\n\n            if prime_fib_count == n:\n\n                return f[-1]",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases and logic involved. Then write complete tests using unittest.\n\nFunction:\nimport math\n\nfrom typing import Optional\n\n\n\ndef is_prime(p: int) -> bool:\n\n\n\n    if p < 2:\n\n        return False\n\n    for k in range(2, int(math.sqrt(p)) + 1):\n\n        if p % k == 0:\n\n            return False\n\n    return True\n\n\n\ndef prime_fib(n: int) -> Optional[int]:\n\n\n\n    f = [0, 1] \n\n    prime_fib_count = 0\n\n    \n\n    while True:\n\n        f.append(f[-1] + f[-2])\n\n        if is_prime(f[-1]):\n\n            prime_fib_count += 1\n\n            if prime_fib_count == n:\n\n                return f[-1]"
}