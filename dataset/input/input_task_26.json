{
    "zero-shot": "Write unit tests in Python for the following function.\n\nclass Pair(object): \n\n\tdef __init__(self, a, b): \n\n\t\tself.a = a \n\n\t\tself.b = b \n\ndef max_chain_length(arr, n): \n\n\tmax = 0\n\n\tmcl = [1 for i in range(n)] \n\n\tfor i in range(1, n): \n\n\t\tfor j in range(0, i): \n\n\t\t\tif (arr[i].a > arr[j].b and\n\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\n\t\t\t\tmcl[i] = mcl[j] + 1\n\n\tfor i in range(n): \n\n\t\tif (max < mcl[i]): \n\n\t\t\tmax = mcl[i] \n\n\treturn max",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nclass Pair(object): \n\n\tdef __init__(self, a, b): \n\n\t\tself.a = a \n\n\t\tself.b = b \n\ndef max_chain_length(arr, n): \n\n\tmax = 0\n\n\tmcl = [1 for i in range(n)] \n\n\tfor i in range(1, n): \n\n\t\tfor j in range(0, i): \n\n\t\t\tif (arr[i].a > arr[j].b and\n\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\n\t\t\t\tmcl[i] = mcl[j] + 1\n\n\tfor i in range(n): \n\n\t\tif (max < mcl[i]): \n\n\t\t\tmax = mcl[i] \n\n\treturn max",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\nclass Pair(object): \n\n\tdef __init__(self, a, b): \n\n\t\tself.a = a \n\n\t\tself.b = b \n\ndef max_chain_length(arr, n): \n\n\tmax = 0\n\n\tmcl = [1 for i in range(n)] \n\n\tfor i in range(1, n): \n\n\t\tfor j in range(0, i): \n\n\t\t\tif (arr[i].a > arr[j].b and\n\n\t\t\t\tmcl[i] < mcl[j] + 1): \n\n\t\t\t\tmcl[i] = mcl[j] + 1\n\n\tfor i in range(n): \n\n\t\tif (max < mcl[i]): \n\n\t\t\tmax = mcl[i] \n\n\treturn max"
}