{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef check_Equality(s): \n\n    return (ord(s[0]) == ord(s[len(s) - 1])); \n\ndef count_Substring_With_Equal_Ends(s): \n\n    result = 0; \n\n    n = len(s); \n\n    for i in range(n):\n\n        for j in range(1,n-i+1): \n\n            if (check_Equality(s[i:i+j])): \n\n                result+=1; \n\n    return result; ",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef check_Equality(s): \n\n    return (ord(s[0]) == ord(s[len(s) - 1])); \n\ndef count_Substring_With_Equal_Ends(s): \n\n    result = 0; \n\n    n = len(s); \n\n    for i in range(n):\n\n        for j in range(1,n-i+1): \n\n            if (check_Equality(s[i:i+j])): \n\n                result+=1; \n\n    return result; ",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef check_Equality(s): \n\n    return (ord(s[0]) == ord(s[len(s) - 1])); \n\ndef count_Substring_With_Equal_Ends(s): \n\n    result = 0; \n\n    n = len(s); \n\n    for i in range(n):\n\n        for j in range(1,n-i+1): \n\n            if (check_Equality(s[i:i+j])): \n\n                result+=1; \n\n    return result; "
}