{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef cal_electbill(units):\n\n if(units < 50):\n\n    amount = units * 2.60\n\n    surcharge = 25\n\n elif(units <= 100):\n\n    amount = 130 + ((units - 50) * 3.25)\n\n    surcharge = 35\n\n elif(units <= 200):\n\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n\n    surcharge = 45\n\n else:\n\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n\n    surcharge = 75\n\n total = amount + surcharge\n\n return total",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef cal_electbill(units):\n\n if(units < 50):\n\n    amount = units * 2.60\n\n    surcharge = 25\n\n elif(units <= 100):\n\n    amount = 130 + ((units - 50) * 3.25)\n\n    surcharge = 35\n\n elif(units <= 200):\n\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n\n    surcharge = 45\n\n else:\n\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n\n    surcharge = 75\n\n total = amount + surcharge\n\n return total",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef cal_electbill(units):\n\n if(units < 50):\n\n    amount = units * 2.60\n\n    surcharge = 25\n\n elif(units <= 100):\n\n    amount = 130 + ((units - 50) * 3.25)\n\n    surcharge = 35\n\n elif(units <= 200):\n\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n\n    surcharge = 45\n\n else:\n\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n\n    surcharge = 75\n\n total = amount + surcharge\n\n return total"
}