{
    "zero-shot": "Write unit tests in Python for the following function.\n\nfrom typing import List\n\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n\n    \n\n    \"\"\"\n\n    Insert a number 'delimiter' between every two consecutive elements of the input list `numbers`.\n\n    \n\n    >>> intersperse([], 4)\n\n    []\n\n    >>> intersperse([1, 2, 3], 4)\n\n    [1, 4, 2, 4, 3]\n\n    \"\"\"\n\n\n\n    if not numbers:\n\n        return []\n\n    \n\n    result = []\n\n    for n in numbers[:-1]:\n\n        result.append(n)\n\n        result.append(delimiter)\n\n    \n\n    result.append(numbers[-1])\n\n    return result\n\n",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nfrom typing import List\n\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n\n    \n\n    \"\"\"\n\n    Insert a number 'delimiter' between every two consecutive elements of the input list `numbers`.\n\n    \n\n    >>> intersperse([], 4)\n\n    []\n\n    >>> intersperse([1, 2, 3], 4)\n\n    [1, 4, 2, 4, 3]\n\n    \"\"\"\n\n\n\n    if not numbers:\n\n        return []\n\n    \n\n    result = []\n\n    for n in numbers[:-1]:\n\n        result.append(n)\n\n        result.append(delimiter)\n\n    \n\n    result.append(numbers[-1])\n\n    return result\n\n",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\nfrom typing import List\n\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n\n    \n\n    \"\"\"\n\n    Insert a number 'delimiter' between every two consecutive elements of the input list `numbers`.\n\n    \n\n    >>> intersperse([], 4)\n\n    []\n\n    >>> intersperse([1, 2, 3], 4)\n\n    [1, 4, 2, 4, 3]\n\n    \"\"\"\n\n\n\n    if not numbers:\n\n        return []\n\n    \n\n    result = []\n\n    for n in numbers[:-1]:\n\n        result.append(n)\n\n        result.append(delimiter)\n\n    \n\n    result.append(numbers[-1])\n\n    return result\n\n"
}