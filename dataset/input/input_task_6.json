{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef string_xor(a: str, b: str) -> str:\n\n    \"\"\"\n\n    Perform a binary XOR operation on two strings consisting only of 1s and 0s.\n\n    The result is returned as a string of 1s and 0s.\n\n    \n\n    >>> string_xor('010', '110')\n\n    '100'\n\n    \"\"\"\n\n\n\n    def xor(i: str, j: str) -> str:\n\n        if i == j:\n\n            return '0'\n\n        else:\n\n            return '1'\n\n    \n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\n",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef string_xor(a: str, b: str) -> str:\n\n    \"\"\"\n\n    Perform a binary XOR operation on two strings consisting only of 1s and 0s.\n\n    The result is returned as a string of 1s and 0s.\n\n    \n\n    >>> string_xor('010', '110')\n\n    '100'\n\n    \"\"\"\n\n\n\n    def xor(i: str, j: str) -> str:\n\n        if i == j:\n\n            return '0'\n\n        else:\n\n            return '1'\n\n    \n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\n",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef string_xor(a: str, b: str) -> str:\n\n    \"\"\"\n\n    Perform a binary XOR operation on two strings consisting only of 1s and 0s.\n\n    The result is returned as a string of 1s and 0s.\n\n    \n\n    >>> string_xor('010', '110')\n\n    '100'\n\n    \"\"\"\n\n\n\n    def xor(i: str, j: str) -> str:\n\n        if i == j:\n\n            return '0'\n\n        else:\n\n            return '1'\n\n    \n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n\n"
}