{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef how_many_times(string: str, substring: str) -> int:\n\n    \"\"\"\n\n    Find how many times a given substring can be found in the original string, counting overlapping cases.\n\n    \n\n    >>> how_many_times('', 'a')\n\n    0\n\n    >>> how_many_times('aaa', 'a')\n\n    3\n\n    >>> how_many_times('aaaa', 'aa')\n\n    3\n\n    \"\"\"\n\n\n\n    times = 0\n\n    substring_length = len(substring)\n\n    \n\n    for i in range(len(string) - substring_length + 1):\n\n        if string[i:i + substring_length] == substring:\n\n            times += 1\n\n    \n\n    return times",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef how_many_times(string: str, substring: str) -> int:\n\n    \"\"\"\n\n    Find how many times a given substring can be found in the original string, counting overlapping cases.\n\n    \n\n    >>> how_many_times('', 'a')\n\n    0\n\n    >>> how_many_times('aaa', 'a')\n\n    3\n\n    >>> how_many_times('aaaa', 'aa')\n\n    3\n\n    \"\"\"\n\n\n\n    times = 0\n\n    substring_length = len(substring)\n\n    \n\n    for i in range(len(string) - substring_length + 1):\n\n        if string[i:i + substring_length] == substring:\n\n            times += 1\n\n    \n\n    return times",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef how_many_times(string: str, substring: str) -> int:\n\n    \"\"\"\n\n    Find how many times a given substring can be found in the original string, counting overlapping cases.\n\n    \n\n    >>> how_many_times('', 'a')\n\n    0\n\n    >>> how_many_times('aaa', 'a')\n\n    3\n\n    >>> how_many_times('aaaa', 'aa')\n\n    3\n\n    \"\"\"\n\n\n\n    times = 0\n\n    substring_length = len(substring)\n\n    \n\n    for i in range(len(string) - substring_length + 1):\n\n        if string[i:i + substring_length] == substring:\n\n            times += 1\n\n    \n\n    return times"
}