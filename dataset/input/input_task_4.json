{
    "zero-shot": "Write unit tests in Python for the following function.\n\nfrom typing import List\n\nimport collections\n\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\n    \n\n    \"\"\"\n\n    From a list of integers, remove all elements that occur more than once.\n\n    Keep the order of the elements left the same as in the input.\n\n    \n\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n\n    [1, 3, 4]\n\n    \"\"\"\n\n\n\n    c = collections.Counter(numbers)\n\n    return [n for n in numbers if c[n] == 1]",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nfrom typing import List\n\nimport collections\n\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\n    \n\n    \"\"\"\n\n    From a list of integers, remove all elements that occur more than once.\n\n    Keep the order of the elements left the same as in the input.\n\n    \n\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n\n    [1, 3, 4]\n\n    \"\"\"\n\n\n\n    c = collections.Counter(numbers)\n\n    return [n for n in numbers if c[n] == 1]",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\nfrom typing import List\n\nimport collections\n\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n\n    \n\n    \"\"\"\n\n    From a list of integers, remove all elements that occur more than once.\n\n    Keep the order of the elements left the same as in the input.\n\n    \n\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n\n    [1, 3, 4]\n\n    \"\"\"\n\n\n\n    c = collections.Counter(numbers)\n\n    return [n for n in numbers if c[n] == 1]"
}