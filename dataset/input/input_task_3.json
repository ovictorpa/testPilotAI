{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef is_happy(s):\n\n    \"\"\"\n\n    Check if the string `s` is happy. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n\n\n    Examples:\n\n    >>> is_happy(\"a\")\n\n    False\n\n    >>> is_happy(\"aa\")\n\n    False\n\n    >>> is_happy(\"abcd\")\n\n    True\n\n    >>> is_happy(\"aabb\")\n\n    False\n\n    >>> is_happy(\"adb\")\n\n    True\n\n    >>> is_happy(\"xyy\")\n\n    False\n\n    \"\"\"\n\n\n\n    if len(s) < 3:\n\n        return False\n\n    for i in range(len(s) - 2):\n\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n            return False\n\n    return True\n\n",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef is_happy(s):\n\n    \"\"\"\n\n    Check if the string `s` is happy. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n\n\n    Examples:\n\n    >>> is_happy(\"a\")\n\n    False\n\n    >>> is_happy(\"aa\")\n\n    False\n\n    >>> is_happy(\"abcd\")\n\n    True\n\n    >>> is_happy(\"aabb\")\n\n    False\n\n    >>> is_happy(\"adb\")\n\n    True\n\n    >>> is_happy(\"xyy\")\n\n    False\n\n    \"\"\"\n\n\n\n    if len(s) < 3:\n\n        return False\n\n    for i in range(len(s) - 2):\n\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n            return False\n\n    return True\n\n",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef is_happy(s):\n\n    \"\"\"\n\n    Check if the string `s` is happy. A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n\n\n    Examples:\n\n    >>> is_happy(\"a\")\n\n    False\n\n    >>> is_happy(\"aa\")\n\n    False\n\n    >>> is_happy(\"abcd\")\n\n    True\n\n    >>> is_happy(\"aabb\")\n\n    False\n\n    >>> is_happy(\"adb\")\n\n    True\n\n    >>> is_happy(\"xyy\")\n\n    False\n\n    \"\"\"\n\n\n\n    if len(s) < 3:\n\n        return False\n\n    for i in range(len(s) - 2):\n\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n\n            return False\n\n    return True\n\n"
}