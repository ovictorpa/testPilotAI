{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef decimal_To_Binary(N): \n\n    B_Number = 0\n\n    cnt = 0\n\n    while (N != 0): \n\n        rem = N % 2\n\n        c = pow(10,cnt)  \n\n        B_Number += rem*c  \n\n        N //= 2 \n\n        cnt += 1\n\n    return B_Number",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef decimal_To_Binary(N): \n\n    B_Number = 0\n\n    cnt = 0\n\n    while (N != 0): \n\n        rem = N % 2\n\n        c = pow(10,cnt)  \n\n        B_Number += rem*c  \n\n        N //= 2 \n\n        cnt += 1\n\n    return B_Number",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef decimal_To_Binary(N): \n\n    B_Number = 0\n\n    cnt = 0\n\n    while (N != 0): \n\n        rem = N % 2\n\n        c = pow(10,cnt)  \n\n        B_Number += rem*c  \n\n        N //= 2 \n\n        cnt += 1\n\n    return B_Number"
}