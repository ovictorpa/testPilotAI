{
    "zero-shot": "Write unit tests in Python for the following function.\n\nfrom typing import List\n\n\n\ndef all_prefixes(string: str) -> List[str]:\n\n    \n\n    \"\"\"\n\n    Return a list of all prefixes of the input string, from shortest to longest.\n\n    \n\n    >>> all_prefixes('abc')\n\n    ['a', 'ab', 'abc']\n\n    \"\"\"\n\n\n\n    result = []\n\n    for i in range(len(string)):\n\n        result.append(string[:i + 1])\n\n    return result",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nfrom typing import List\n\n\n\ndef all_prefixes(string: str) -> List[str]:\n\n    \n\n    \"\"\"\n\n    Return a list of all prefixes of the input string, from shortest to longest.\n\n    \n\n    >>> all_prefixes('abc')\n\n    ['a', 'ab', 'abc']\n\n    \"\"\"\n\n\n\n    result = []\n\n    for i in range(len(string)):\n\n        result.append(string[:i + 1])\n\n    return result",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\nfrom typing import List\n\n\n\ndef all_prefixes(string: str) -> List[str]:\n\n    \n\n    \"\"\"\n\n    Return a list of all prefixes of the input string, from shortest to longest.\n\n    \n\n    >>> all_prefixes('abc')\n\n    ['a', 'ab', 'abc']\n\n    \"\"\"\n\n\n\n    result = []\n\n    for i in range(len(string)):\n\n        result.append(string[:i + 1])\n\n    return result"
}