{
    "zero-shot": "Write unit tests in Python for the following function.\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \n\n    \"\"\"\n\n    Return the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm.\n\n    \n\n    >>> greatest_common_divisor(3, 5)\n\n    1\n\n    >>> greatest_common_divisor(25, 15)\n\n    5\n\n    \"\"\"\n\n\n\n    while b:\n\n        a, b = b, a % b\n\n    return a",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \n\n    \"\"\"\n\n    Return the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm.\n\n    \n\n    >>> greatest_common_divisor(3, 5)\n\n    1\n\n    >>> greatest_common_divisor(25, 15)\n\n    5\n\n    \"\"\"\n\n\n\n    while b:\n\n        a, b = b, a % b\n\n    return a",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\ndef greatest_common_divisor(a: int, b: int) -> int:\n\n    \n\n    \"\"\"\n\n    Return the greatest common divisor (GCD) of two integers a and b using the Euclidean algorithm.\n\n    \n\n    >>> greatest_common_divisor(3, 5)\n\n    1\n\n    >>> greatest_common_divisor(25, 15)\n\n    5\n\n    \"\"\"\n\n\n\n    while b:\n\n        a, b = b, a % b\n\n    return a"
}