{
    "zero-shot": "Write unit tests in Python for the following function.\n\nfrom typing import List, Optional\n\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\n    \n\n    \"\"\"\n\n    Return the longest string from the list of strings.\n\n    If there are multiple strings with the same maximum length, return the first one.\n\n    Return None if the input list is empty.\n\n    \n\n    >>> longest([])\n\n    None\n\n    >>> longest(['a', 'b', 'c'])\n\n    'a'\n\n    >>> longest(['a', 'bb', 'ccc'])\n\n    'ccc'\n\n    \"\"\"\n\n\n\n    if not strings:\n\n        return None\n\n    \n\n    maxlen = max(len(x) for x in strings)\n\n    for s in strings:\n\n        if len(s) == maxlen:\n\n            return s",
    "few-shot": "Write unit tests in Python for the following function. Here are some examples:\nExample of basic unit test:\ndef add(a, b): return a + b\n\nTest:\nimport unittest\nclass TestAdd(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(1, 2), 3)\n\nNow for the function:\nfrom typing import List, Optional\n\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\n    \n\n    \"\"\"\n\n    Return the longest string from the list of strings.\n\n    If there are multiple strings with the same maximum length, return the first one.\n\n    Return None if the input list is empty.\n\n    \n\n    >>> longest([])\n\n    None\n\n    >>> longest(['a', 'b', 'c'])\n\n    'a'\n\n    >>> longest(['a', 'bb', 'ccc'])\n\n    'ccc'\n\n    \"\"\"\n\n\n\n    if not strings:\n\n        return None\n\n    \n\n    maxlen = max(len(x) for x in strings)\n\n    for s in strings:\n\n        if len(s) == maxlen:\n\n            return s",
    "cot": "Write unit tests in Python for the following function. First, think step-by-step about the possible edge cases, scenarios, assertions and logic involved. Then write complete tests using unittest.\n\nFunction:\nfrom typing import List, Optional\n\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n\n    \n\n    \"\"\"\n\n    Return the longest string from the list of strings.\n\n    If there are multiple strings with the same maximum length, return the first one.\n\n    Return None if the input list is empty.\n\n    \n\n    >>> longest([])\n\n    None\n\n    >>> longest(['a', 'b', 'c'])\n\n    'a'\n\n    >>> longest(['a', 'bb', 'ccc'])\n\n    'ccc'\n\n    \"\"\"\n\n\n\n    if not strings:\n\n        return None\n\n    \n\n    maxlen = max(len(x) for x in strings)\n\n    for s in strings:\n\n        if len(s) == maxlen:\n\n            return s"
}